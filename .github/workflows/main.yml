name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build & Deployt to Production
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Prepare .env
      run: |
        # Create ENV FILE
        php -r "file_exists('.env') || copy('.env.production', '.env');"

        # Write Secrets
        echo "APP_KEY=$APP_KEY" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_DATABASE=$DB_NAME" >> .env
        echo "DB_PASSWORD=$DB_PASS" >> .env
        echo "DB_USERNAME=$DB_USER" >> .env
        echo "DISCORD_CLIENT_ID=$DISCORD_CLIENT_ID" >> .env
        echo "DISCORD_CLIENT_SECRET=$DISCORD_CLIENT_SECRET" >> .env
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_USER: ${{ secrets.DB_USER }}
        DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
        DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}

    - name: Cache for Composer Packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php

    - name: Install Dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: rpg-companion/core-image
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ci/docker/production/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ci/aws/task-definition.json
        container-name: rpg-companion-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: rpg-companion-service
        cluster: rpg-companion-cluster
        wait-for-service-stability: true
